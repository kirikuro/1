// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/hub.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MinerListRequest struct {
}

func (m *MinerListRequest) Reset()                    { *m = MinerListRequest{} }
func (m *MinerListRequest) String() string            { return proto.CompactTextString(m) }
func (*MinerListRequest) ProtoMessage()               {}
func (*MinerListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type MinerListReply struct {
	Info map[string]*MinerListReply_ListValue `protobuf:"bytes,1,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MinerListReply) Reset()                    { *m = MinerListReply{} }
func (m *MinerListReply) String() string            { return proto.CompactTextString(m) }
func (*MinerListReply) ProtoMessage()               {}
func (*MinerListReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *MinerListReply) GetInfo() map[string]*MinerListReply_ListValue {
	if m != nil {
		return m.Info
	}
	return nil
}

type MinerListReply_ListValue struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *MinerListReply_ListValue) Reset()                    { *m = MinerListReply_ListValue{} }
func (m *MinerListReply_ListValue) String() string            { return proto.CompactTextString(m) }
func (*MinerListReply_ListValue) ProtoMessage()               {}
func (*MinerListReply_ListValue) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

func (m *MinerListReply_ListValue) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type HubInfoRequest struct {
	Miner string `protobuf:"bytes,1,opt,name=miner" json:"miner,omitempty"`
}

func (m *HubInfoRequest) Reset()                    { *m = HubInfoRequest{} }
func (m *HubInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*HubInfoRequest) ProtoMessage()               {}
func (*HubInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *HubInfoRequest) GetMiner() string {
	if m != nil {
		return m.Miner
	}
	return ""
}

type HubStartTaskRequest struct {
	Miner         string `protobuf:"bytes,1,opt,name=miner" json:"miner,omitempty"`
	Registry      string `protobuf:"bytes,2,opt,name=registry" json:"registry,omitempty"`
	Image         string `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Auth          string `protobuf:"bytes,4,opt,name=auth" json:"auth,omitempty"`
	PublicKeyData string `protobuf:"bytes,5,opt,name=PublicKeyData,json=publicKeyData" json:"PublicKeyData,omitempty"`
}

func (m *HubStartTaskRequest) Reset()                    { *m = HubStartTaskRequest{} }
func (m *HubStartTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*HubStartTaskRequest) ProtoMessage()               {}
func (*HubStartTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *HubStartTaskRequest) GetMiner() string {
	if m != nil {
		return m.Miner
	}
	return ""
}

func (m *HubStartTaskRequest) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *HubStartTaskRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *HubStartTaskRequest) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *HubStartTaskRequest) GetPublicKeyData() string {
	if m != nil {
		return m.PublicKeyData
	}
	return ""
}

type HubStartTaskReply struct {
	Id       string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Endpoint []string `protobuf:"bytes,2,rep,name=endpoint" json:"endpoint,omitempty"`
}

func (m *HubStartTaskReply) Reset()                    { *m = HubStartTaskReply{} }
func (m *HubStartTaskReply) String() string            { return proto.CompactTextString(m) }
func (*HubStartTaskReply) ProtoMessage()               {}
func (*HubStartTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *HubStartTaskReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HubStartTaskReply) GetEndpoint() []string {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

type HubStatusMapRequest struct {
	Miner string `protobuf:"bytes,1,opt,name=miner" json:"miner,omitempty"`
}

func (m *HubStatusMapRequest) Reset()                    { *m = HubStatusMapRequest{} }
func (m *HubStatusMapRequest) String() string            { return proto.CompactTextString(m) }
func (*HubStatusMapRequest) ProtoMessage()               {}
func (*HubStatusMapRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *HubStatusMapRequest) GetMiner() string {
	if m != nil {
		return m.Miner
	}
	return ""
}

type HubStatusRequest struct {
}

func (m *HubStatusRequest) Reset()                    { *m = HubStatusRequest{} }
func (m *HubStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*HubStatusRequest) ProtoMessage()               {}
func (*HubStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type HubStatusReply struct {
	MinerCount uint64 `protobuf:"varint,1,opt,name=minerCount" json:"minerCount,omitempty"`
	Uptime     uint64 `protobuf:"varint,2,opt,name=uptime" json:"uptime,omitempty"`
}

func (m *HubStatusReply) Reset()                    { *m = HubStatusReply{} }
func (m *HubStatusReply) String() string            { return proto.CompactTextString(m) }
func (*HubStatusReply) ProtoMessage()               {}
func (*HubStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *HubStatusReply) GetMinerCount() uint64 {
	if m != nil {
		return m.MinerCount
	}
	return 0
}

func (m *HubStatusReply) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func init() {
	proto.RegisterType((*MinerListRequest)(nil), "sonm.MinerListRequest")
	proto.RegisterType((*MinerListReply)(nil), "sonm.MinerListReply")
	proto.RegisterType((*MinerListReply_ListValue)(nil), "sonm.MinerListReply.ListValue")
	proto.RegisterType((*HubInfoRequest)(nil), "sonm.HubInfoRequest")
	proto.RegisterType((*HubStartTaskRequest)(nil), "sonm.HubStartTaskRequest")
	proto.RegisterType((*HubStartTaskReply)(nil), "sonm.HubStartTaskReply")
	proto.RegisterType((*HubStatusMapRequest)(nil), "sonm.HubStatusMapRequest")
	proto.RegisterType((*HubStatusRequest)(nil), "sonm.HubStatusRequest")
	proto.RegisterType((*HubStatusReply)(nil), "sonm.HubStatusReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hub service

type HubClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	Status(ctx context.Context, in *HubStatusRequest, opts ...grpc.CallOption) (*HubStatusReply, error)
	MinerList(ctx context.Context, in *MinerListRequest, opts ...grpc.CallOption) (*MinerListReply, error)
	Info(ctx context.Context, in *HubInfoRequest, opts ...grpc.CallOption) (*MinerStatusReply, error)
	StartTask(ctx context.Context, in *HubStartTaskRequest, opts ...grpc.CallOption) (*HubStartTaskReply, error)
	StopTask(ctx context.Context, in *TaskStopRequest, opts ...grpc.CallOption) (*TaskStopReply, error)
	TaskStatus(ctx context.Context, in *TaskDetailsRequest, opts ...grpc.CallOption) (*TaskDetailsReply, error)
	MinerStatus(ctx context.Context, in *HubStatusMapRequest, opts ...grpc.CallOption) (*TaskDetailsMapReply, error)
	TaskLogs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (Hub_TaskLogsClient, error)
}

type hubClient struct {
	cc *grpc.ClientConn
}

func NewHubClient(cc *grpc.ClientConn) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Status(ctx context.Context, in *HubStatusRequest, opts ...grpc.CallOption) (*HubStatusReply, error) {
	out := new(HubStatusReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) MinerList(ctx context.Context, in *MinerListRequest, opts ...grpc.CallOption) (*MinerListReply, error) {
	out := new(MinerListReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/MinerList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Info(ctx context.Context, in *HubInfoRequest, opts ...grpc.CallOption) (*MinerStatusReply, error) {
	out := new(MinerStatusReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) StartTask(ctx context.Context, in *HubStartTaskRequest, opts ...grpc.CallOption) (*HubStartTaskReply, error) {
	out := new(HubStartTaskReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/StartTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) StopTask(ctx context.Context, in *TaskStopRequest, opts ...grpc.CallOption) (*TaskStopReply, error) {
	out := new(TaskStopReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/StopTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) TaskStatus(ctx context.Context, in *TaskDetailsRequest, opts ...grpc.CallOption) (*TaskDetailsReply, error) {
	out := new(TaskDetailsReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/TaskStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) MinerStatus(ctx context.Context, in *HubStatusMapRequest, opts ...grpc.CallOption) (*TaskDetailsMapReply, error) {
	out := new(TaskDetailsMapReply)
	err := grpc.Invoke(ctx, "/sonm.Hub/MinerStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) TaskLogs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (Hub_TaskLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hub_serviceDesc.Streams[0], c.cc, "/sonm.Hub/TaskLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubTaskLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hub_TaskLogsClient interface {
	Recv() (*TaskLogsChunk, error)
	grpc.ClientStream
}

type hubTaskLogsClient struct {
	grpc.ClientStream
}

func (x *hubTaskLogsClient) Recv() (*TaskLogsChunk, error) {
	m := new(TaskLogsChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Hub service

type HubServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	Status(context.Context, *HubStatusRequest) (*HubStatusReply, error)
	MinerList(context.Context, *MinerListRequest) (*MinerListReply, error)
	Info(context.Context, *HubInfoRequest) (*MinerStatusReply, error)
	StartTask(context.Context, *HubStartTaskRequest) (*HubStartTaskReply, error)
	StopTask(context.Context, *TaskStopRequest) (*TaskStopReply, error)
	TaskStatus(context.Context, *TaskDetailsRequest) (*TaskDetailsReply, error)
	MinerStatus(context.Context, *HubStatusMapRequest) (*TaskDetailsMapReply, error)
	TaskLogs(*TaskLogsRequest, Hub_TaskLogsServer) error
}

func RegisterHubServer(s *grpc.Server, srv HubServer) {
	s.RegisterService(&_Hub_serviceDesc, srv)
}

func _Hub_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Status(ctx, req.(*HubStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_MinerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).MinerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/MinerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).MinerList(ctx, req.(*MinerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Info(ctx, req.(*HubInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubStartTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/StartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).StartTask(ctx, req.(*HubStartTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_StopTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).StopTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/StopTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).StopTask(ctx, req.(*TaskStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_TaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).TaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/TaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).TaskStatus(ctx, req.(*TaskDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_MinerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubStatusMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).MinerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.Hub/MinerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).MinerStatus(ctx, req.(*HubStatusMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_TaskLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HubServer).TaskLogs(m, &hubTaskLogsServer{stream})
}

type Hub_TaskLogsServer interface {
	Send(*TaskLogsChunk) error
	grpc.ServerStream
}

type hubTaskLogsServer struct {
	grpc.ServerStream
}

func (x *hubTaskLogsServer) Send(m *TaskLogsChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _Hub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.Hub",
	HandlerType: (*HubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Hub_Ping_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Hub_Status_Handler,
		},
		{
			MethodName: "MinerList",
			Handler:    _Hub_MinerList_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Hub_Info_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _Hub_StartTask_Handler,
		},
		{
			MethodName: "StopTask",
			Handler:    _Hub_StopTask_Handler,
		},
		{
			MethodName: "TaskStatus",
			Handler:    _Hub_TaskStatus_Handler,
		},
		{
			MethodName: "MinerStatus",
			Handler:    _Hub_MinerStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TaskLogs",
			Handler:       _Hub_TaskLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/hub.proto",
}

func init() { proto.RegisterFile("proto/hub.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0x5d, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x1d, 0x27, 0x8a, 0xa7, 0x6a, 0x9a, 0x6e, 0x7f, 0x70, 0xfd, 0x50, 0x45, 0x06, 0xa1,
	0x4a, 0xa0, 0x80, 0x02, 0x42, 0x55, 0x79, 0x00, 0xd4, 0x56, 0x0a, 0xa2, 0x95, 0x2a, 0x17, 0xc1,
	0xf3, 0x9a, 0x6c, 0x93, 0x55, 0x9c, 0xb5, 0xb1, 0x77, 0x91, 0x7c, 0x12, 0x2e, 0xc0, 0x49, 0x38,
	0x19, 0x9a, 0x5d, 0xdb, 0xb5, 0xd3, 0xd2, 0xb7, 0x99, 0x6f, 0xe6, 0xfb, 0x66, 0x66, 0x67, 0xb4,
	0xb0, 0x9d, 0x66, 0x89, 0x4c, 0x5e, 0x2d, 0x54, 0x34, 0xd6, 0x16, 0x71, 0xf2, 0x44, 0xac, 0xfc,
	0x7d, 0x03, 0x73, 0x81, 0x9e, 0xe0, 0xd4, 0x04, 0x03, 0x02, 0xc3, 0x2b, 0x2e, 0x58, 0x76, 0xc9,
	0x73, 0x19, 0xb2, 0x9f, 0x8a, 0xe5, 0x32, 0xf8, 0x6b, 0xc1, 0xa0, 0x01, 0xa6, 0x71, 0x41, 0x26,
	0xe0, 0x70, 0x71, 0x9b, 0x78, 0xd6, 0xa8, 0x73, 0xbc, 0x39, 0x39, 0x1a, 0xa3, 0xc8, 0xb8, 0x9d,
	0x33, 0xfe, 0x2c, 0x6e, 0x93, 0x0b, 0x21, 0xb3, 0x22, 0xd4, 0xb9, 0xfe, 0x53, 0x70, 0x31, 0xf8,
	0x8d, 0xc6, 0x8a, 0x91, 0x03, 0xe8, 0xfd, 0x42, 0x23, 0xd7, 0x12, 0x6e, 0x58, 0x7a, 0xfe, 0x77,
	0x70, 0x6b, 0x1e, 0x19, 0x42, 0x67, 0xc9, 0x0a, 0xcf, 0x1a, 0x59, 0xc7, 0x6e, 0x88, 0x26, 0x79,
	0x0b, 0x5d, 0x9d, 0xe8, 0xd9, 0x23, 0xeb, 0xbf, 0x85, 0xeb, 0x2a, 0xa1, 0x49, 0x3e, 0xb5, 0x4f,
	0xac, 0xe0, 0x39, 0x0c, 0xa6, 0x2a, 0x42, 0xed, 0x72, 0x2c, 0xb2, 0x07, 0xdd, 0x15, 0x12, 0x4b,
	0x7d, 0xe3, 0x04, 0xbf, 0x2d, 0xd8, 0x9d, 0xaa, 0xe8, 0x46, 0xd2, 0x4c, 0x7e, 0xa5, 0xf9, 0xf2,
	0xd1, 0x6c, 0xe2, 0x43, 0x3f, 0x63, 0x73, 0x9e, 0xcb, 0xac, 0xd0, 0x2d, 0xb9, 0x61, 0xed, 0x23,
	0x83, 0xaf, 0xe8, 0x9c, 0x79, 0x1d, 0xc3, 0xd0, 0x0e, 0x21, 0xe0, 0x50, 0x25, 0x17, 0x9e, 0xa3,
	0x41, 0x6d, 0x93, 0x67, 0xb0, 0x75, 0xad, 0xa2, 0x98, 0xff, 0xf8, 0xc2, 0x8a, 0x73, 0x2a, 0xa9,
	0xd7, 0xd5, 0xc1, 0xad, 0xb4, 0x09, 0x06, 0x1f, 0x60, 0xa7, 0xdd, 0x18, 0x2e, 0x62, 0x00, 0x36,
	0x9f, 0x95, 0x3d, 0xd9, 0x7c, 0x86, 0x0d, 0x31, 0x31, 0x4b, 0x13, 0x2e, 0xa4, 0x67, 0xeb, 0x97,
	0xad, 0xfd, 0xe0, 0x45, 0x35, 0x99, 0x54, 0xf9, 0x15, 0x4d, 0x1f, 0x7f, 0x07, 0x02, 0xc3, 0x3a,
	0xb9, 0x3a, 0x84, 0xa9, 0x7e, 0xc3, 0x0a, 0xc3, 0xf2, 0x47, 0x00, 0x3a, 0xfd, 0x2c, 0x51, 0x42,
	0x6a, 0x01, 0x27, 0x6c, 0x20, 0xb8, 0x66, 0x95, 0x4a, 0xbe, 0x32, 0x0b, 0x73, 0xc2, 0xd2, 0x9b,
	0xfc, 0x71, 0xa0, 0x33, 0x55, 0x11, 0x79, 0x09, 0xce, 0x35, 0x17, 0x73, 0xb2, 0x63, 0x16, 0x89,
	0x76, 0x59, 0xcc, 0xdf, 0x6e, 0x42, 0x69, 0x5c, 0x04, 0x1b, 0xe4, 0x04, 0x7a, 0xa6, 0x38, 0x39,
	0x30, 0xc1, 0xf5, 0x0e, 0xfd, 0xbd, 0x7b, 0xb8, 0x61, 0xbe, 0x07, 0xb7, 0x3e, 0x92, 0x8a, 0xbc,
	0x7e, 0xe7, 0x15, 0xb9, 0x7d, 0x4d, 0xc1, 0x06, 0x79, 0x07, 0x0e, 0xde, 0x0d, 0xb9, 0x13, 0x6f,
	0x9c, 0x91, 0xdf, 0x54, 0x6b, 0x17, 0xfd, 0x04, 0x6e, 0xbd, 0x2d, 0x72, 0xd8, 0xec, 0xac, 0x75,
	0x5a, 0xfe, 0x93, 0x87, 0x42, 0xd5, 0xc4, 0xfd, 0x1b, 0x99, 0xa4, 0x5a, 0x61, 0xdf, 0xa4, 0xa1,
	0x8d, 0x58, 0xc5, 0xde, 0x5d, 0x87, 0x0d, 0xf3, 0x23, 0x80, 0x81, 0xf4, 0x7b, 0x79, 0x77, 0x49,
	0xe7, 0x4c, 0x52, 0x1e, 0xe7, 0x6b, 0xed, 0xb7, 0x22, 0x46, 0xe1, 0x02, 0x36, 0x1b, 0x43, 0xb5,
	0x07, 0x68, 0x5d, 0x90, 0x7f, 0x78, 0x4f, 0x43, 0x07, 0x8d, 0xcc, 0x29, 0xf4, 0x31, 0x70, 0x99,
	0xcc, 0xf3, 0xe6, 0x08, 0xe8, 0x3f, 0x30, 0x02, 0xc2, 0x67, 0x0b, 0x25, 0x96, 0xc1, 0xc6, 0x6b,
	0x2b, 0xea, 0xe9, 0x4f, 0xe9, 0xcd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0x99, 0x2e, 0xa3,
	0xc4, 0x04, 0x00, 0x00,
}
